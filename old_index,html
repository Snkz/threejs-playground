<html>
    <head>
        <title> WebGL on a 90's page </title>
        <style> canvas { width: 100%; height: 100% } 
                html { width: 100%; height: 100% } 
				body { background-image:url('textures/white-lines.gif'); background-color: #FFFFFF;
					   margin: 20px 10px 10px; font: 11px/19px Verdana, Arial, Helvetica, sans-serif; 
					   color: #000000; -webkit-font-smoothing: antialiased; -webkit-text-size-adjust: 
					   100%; width: 100%; height:100%;}
					   
				#side { width: 168px; margin: 0px auto; padding: 0px 10px 0px 10px; display: inline-block; float: left; } 
				#data { margin: 0px 10px; display: inline; width: 80%;} 
                #icon { width: 128px; height: 128px; padding-left: 30px;} 
                #title {} 
				#leftbar { float: right; margin: 0px 10px 0px 10px;} 
				#section80 { float: right;  display: block; margin: -5px 0px -10px 0px;} 
				#section { text-align: right; margin-bottom: -10px ; padding: 0px;} 
                #content {  } 
				#larrow { display: inline; text-align: right; font-size: 14px; margin: 0px 0px 0px 0px;
						  cursor: pointer; cursor: hand;}
				#rarrow { display: inline; text-align: right; font-size: 14px; float: right; 
						  cursor: pointer; cursor: hand; margin: 0px 0px 0px 0px; }
				#blurb { text-align: right; padding-left: 32px;}
				#rainbow { colour: #000000 }
				#location { margin: 0px 0px; }
				#block {margin-left: 188px; height: 454px; background: #FFFFFF;}
                #block-text{margin: 40px 20px; color: #000000; text-align: left; margin-right:10px;}
                #block-text a{display:block;}
                #stuff {width: 100%; margin: 0px auto; padding-top: 0px;}
				#currate { text-align: right; display: inline-block; font-size: 8px; margin: 0px 8px 0px 0px; 
						   padding: 0px 5px 0px 0px; float:right; width: 108px; cursor: default;}
				#ratepicker { margin: 0px 10px 0px 10px; -moz-user-select: none; -webkit-user-select: none; 
							  -ms-user-select:none; user-select:none;}
				ul li{ text-align: right; list-style-type: none; margin: 0; padding: 0; }
				a { text-decoration: none;}
				a:hover { text-decoration: none; outline:rgba(0,0,0,0.025) solid 2px; }
				input { float: right; background-color: #eeeeee; color: #444; padding: 5px; border: none; margin: 3px; }

        </style>
    </head>
    <body>
	  
		<div id="side">
			<div id="icon">
			<!-- ICON JS GEN-->
			</div>
			<div id="ratepicker"  unselectable='on' onselectstart='return false;'>
			<div id="larrow" onclick="boostRate(-1);"> &laquo </div>
			<div id="rarrow" onclick="boostRate(1);"> &raquo </div>
			<div id = "currate"></div>
			</div>
			<div id="leftbar">
				<p id = "blurb"> 
                    Hi. Name's Abdi Dahir and this is a place for me to mark
                    the web in w/e strange way I feel.
                </p>
				<p id = "blurb"> 
                Fun fact: that ball up there is a fractal and its generated
                by a shader. Thats pretty interesting right? Interesting and 
                incredibly unoptimized, sorry but I just dont care to change that.
				</p>
				<div id="section80">
					<h4 id="section" class="rainbow"> on the ground </h4>
					<ul>
						<li>
                        <del><p id= "location"> uoft: bahen center </p></del>
						</li>
						<li>
							<p id="location"> columbia: SEL lab </p>
						</li>
						<li>
							<p id="location"> brooklyn: ??? </p>
						</li>

					</ul>
				</div>
				<div id="section80">
					<h4 id="section" class="rainbow"> on the web </h4>
					<ul>
						<li>
							<a href = "https://github.com/snkz"> github.com/snkz </a>
						</li>
						<li>
							<a href = "https://twitter.com/snkz"> twitter.com/snkz </a>
						</li>
						<li>
							<a href="mailto:abdi.dahir@outlook"> abdi.dahir@outlook.com </a>
						</li>
					</ul>
				</div>
			</div>
		</div>
		<div id="data">
			<div id="title">
				<h2 class="rainbow"> A webpage lost in time</h2>
			</div>
			<div id="content">
				<p class="rainbow"> My sense of design is mine, therefore its good.  </p>
			</div>
			<div id = "stuff">
                <div id="block">
                    <div id="block-text">
                      <p> Let me begin with some content I've been interested in so far: <p>
                      <a href="">RPI as radio tuner.</a>
                      <a href="">Nintendo X Playboy??</a>
                      <a href="">This pendant.</a>

                    </div>
                </div>
			</div>
		</div>
		
		<!-- j whattt? -->
		<script src="js/three.min.js"></script>
        <script id="vertexShader" type="x-shader/x-vertex">
            precision highp float;

            varying vec2 vUv;
            attribute float displacement;
            varying vec3 vNormal;
            uniform float amp;

            void main() {
                vNormal = normal;
                vUv = uv;
                vec3 newPos = position; // + normal * vec3(displacement * amp);
                gl_Position = projectionMatrix * modelViewMatrix * vec4(newPos, 1.0 );
            }

        </script>
        <script id="fragmentShader" type="x-shader/x-fragment">
            uniform float time;
            uniform vec2 resolution;
            varying vec2 vUv;
            varying vec3 vNormal;

            void main( void ) {

            vec2 position = vUv;
            float color = 0.0;
            color += sin( position.x * cos( time / 15.0 ) * 80.0 ) + cos( position.y * cos( time / 15.0 ) * 10.0 );
            color += sin( position.y * sin( time / 10.0 ) * 40.0 ) + cos( position.x * sin( time / 25.0 ) * 40.0 );
            color += sin( position.x * sin( time / 5.0 ) * 10.0 ) + sin( position.y * sin( time / 35.0 ) * 80.0 );
            color *= sin( time / 10.0 ) * 0.5;
            gl_FragColor = vec4( vec3( color, color * 0.5, sin( color + time / 3.0 ) * 0.75 ), 1.0 );
            //gl_FragColor = vec4( position.x, 0.0, 0.0, 1.0 );

            }
        </script>
		<script id="julia-fs" type="x-shader/x-fragment">
            precision highp float;

            uniform float time;
            uniform vec2 resolution;
            varying vec2 vUv;
            varying vec3 vNormal;
            uniform float amp;


            void main(void) {
                vec2 position = vUv;
				float x = (position.x - 0.5) * 3.0;
                float y = (position.y - 0.5) * 3.0;
                //float x = position.x * 3.5 - 2.5;
                //float y = position.y * 2.0 - 1.0;
                //float cx = position.x;
                //float cy = position.y;

                float hue;
                float saturation;
                float value;
                float hueRound;
                int hueIndex;
                float f;
                float p;
                float q;
                float t;
				
				//-0.835 -0.2321
				//-0.8 0.156
				// -0.4 0.6
				// 0.285 0.01
				// 0.29357170269 -0.4885853614

				//float cx = -0.835;
                //float cy =  -0.2321;
				//float cx = -0.8;
                //float cy =  0.156;
                //float cx = -0.40;
                //float cy =  0.6;
				//float cx = 0.285;
                //float cy =  0.01;
				//float cx = 0.74543;
				//float cy = 0.11301;
				float cx = 0.29357170269;
                float cy = -0.4885853614;
				
                float tempX = 0.0;
                int i = 0;
                int runaway = 0;
				float z = 0.0;
				float zf = 0.0;
                for (int i=0; i < 256; i++) {
                    tempX = x * x - y * y + float(cx);
                    y = 2.0 * x * y + float(cy);
                    x = tempX;
					z = x*x + y*y;
                    if (runaway == 0 && z > 4.0) {
                        runaway = i;
						zf = sqrt(z);
                        //break;
                    }
                }
				float br = 0.0;
                if (runaway != 0) {
                    //NIC COLOURING
                    //float z = sqrt(xf*xf + yf*yf);
                    br = log2(1.75 + float(runaway) - log2(log2(zf))) / log2(256.0);
                    
                } else {
                    //gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
					br = log2(1.75 + float(256) - log2(log2(z))) / log2(256.0);
					br = 1.0;

				}
			 gl_FragColor = vec4(br - amp, br, 1.0, 1.0);
            }
        </script>
        <script id="mandshader-fs" type="x-shader/x-fragment">
            precision highp float;

            uniform float time;
            uniform vec2 resolution;
            varying vec2 vUv;
            varying vec3 vNormal;
            uniform float amp;


            void main(void) {
                vec2 position = vUv;
                float cx = position.x * 3.5 - 2.5;
                float cy = position.y * 2.0 - 1.0;

                float hue;
                float saturation;
                float value;
                float hueRound;
                int hueIndex;
                float f;
                float p;
                float q;
                float t;
	
                float x = 0.0;
                float y = 0.0;
                float tempX = 0.0;
                int i = 0;
                int runaway = 0;
				float z = 0.0;
				float zf = 0.0;
                for (int i=0; i < 128; i++) {
                    tempX = x * x - y * y + float(cx);
                    y = 2.0 * x * y + float(cy);
                    x = tempX;
					z = x*x + y*y;
                    if (runaway == 0 && z > 4.0) {
                        runaway = i;
						zf = sqrt(z);
                        //break;
                    }
                }
				float br = 0.0;
                if (runaway != 0) {
                    //NIC COLOURING
                    //float z = sqrt(xf*xf + yf*yf);
                    br = log2(1.75 + float(runaway) - log2(log2(zf))) / log2(128.0);
					gl_FragColor = vec4(br - amp, amp -br, 1.0, 1.0);

                    
                } else {
                    //gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
					gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);

				}
            }
        </script>
		<script id="juliaSINE-fs" type="x-shader/x-fragment">
            precision highp float;

            uniform float time;
            uniform vec2 resolution;
            varying vec2 vUv;
            varying vec3 vNormal;
            uniform float amp;

			float cosh(float val)
			{
				float tmp = exp(val);
				float cosH = (tmp + 1.0 / tmp) / 2.0;
				return cosH;
			}

			float sinh(float val)
			{
				float tmp = exp(val);
				float sinH = (tmp - 1.0 / tmp) / 2.0;
				return sinH;
			}
            void main(void) {
                vec2 position = vUv;
				float x = (position.x - 0.5) * 9.42;
                float y = (position.y - 0.5) * 9.42;
               
                float hue;
                float saturation;
                float value;
                float hueRound;
                int hueIndex;
                float f;
                float p;
                float q;
                float t;
				
				int itter = 256;
				float cx = 1.0;
                float cy =  1.9;
				
                float tempX = 0.0;
				float ctempX = 0.0;
                int i = 0;
                int runaway = 0;
				float z = 0.0;
				float zf = 0.0;
				
				
                for (int i=0; i < 256; i++) {
				
                    tempX = sin(x) * cosh(y);
                    y = cos(x) * sinh(y);
                    x = tempX;
					
					ctempX = x * float(cx) - y * float(cy);
					y = x * float(cy) + y * float(cx);
					x = ctempX;
					z = x*x + y*y;
                    if (runaway == 0 && z > 2500.0) {
                        runaway = i;
						zf = sqrt(z);
                        //break;
                    }
                }
				float br = 0.0;
                if (runaway != 0) {
                    //NIC COLOURING
                    //float z = sqrt(xf*xf + yf*yf);
                    br = log2(1.75 + float(runaway) - log2(log2(zf))) / log2(float(itter));
                    
                } else {
                    //gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);
					br = log2(1.75 + float(itter) - log2(log2(z))) / log2(float(itter));
					br = 1.0;

				}
			 gl_FragColor = vec4(abs(br - amp), abs(amp*amp - br*0.75), amp*amp, 1.0);
            }
        </script>
        <script id="main">
        </script>

    </body>
</html>

